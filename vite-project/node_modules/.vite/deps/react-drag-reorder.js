import {
  require_react
} from "./chunk-YNCU75EO.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/react-drag-reorder/dist/components/draggable/draggable.js
var import_react2 = __toESM(require_react());

// node_modules/react-drag-reorder/dist/components/draggableChildren/draggableChildren.js
var import_react = __toESM(require_react());
import "C:/Users/shinj/OneDrive/Desktop/Coding Projects (FullStack)/ResumeWebsites/gamedashboard/vite-project/node_modules/react-drag-reorder/dist/components/draggableChildren/draggableChild.css";
var DraggableChildComponent = class extends import_react.default.Component {
  render() {
    return import_react.default.createElement("div", {
      draggable: true,
      onDragStart: this.props.dragStart,
      onDragEnter: this.props.dragEnter,
      onDragEnd: this.props.dragEnd,
      className: "grabbable"
    }, this.props.children);
  }
};
var draggableChildren_default = DraggableChildComponent;

// node_modules/react-drag-reorder/dist/components/draggable/draggable.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DraggableComponent = class extends import_react2.Component {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", {
      divs: [],
      currentDiv: null,
      toDiv: null
    });
    _defineProperty(this, "componentDidMount", () => {
      this.setState({
        divs: this.props.children
      });
    });
    _defineProperty(this, "insertElementBefore", () => {
      var _a;
      let divs = [...this.state.divs];
      let currentDiv = this.state.currentDiv;
      let toDiv = this.state.toDiv;
      let currentEle;
      if (currentDiv !== toDiv) {
        currentEle = {
          ...divs[currentDiv]
        };
        divs = divs.filter((val, idx) => {
          return idx !== currentDiv;
        });
        divs.splice(toDiv, 0, currentEle);
        this.setState({
          divs: [],
          currentDiv: null,
          toDiv: null
        }, () => {
          this.setState({
            divs
          });
        });
      }
      if ((_a = this.props) == null ? void 0 : _a.onPosChange)
        this.props.onPosChange(currentDiv, toDiv, currentEle);
    });
    _defineProperty(this, "dragStart", (idx) => {
      this.setState({
        currentDiv: idx
      });
    });
    _defineProperty(this, "dragEnter", (idx) => {
      this.setState({
        toDiv: idx
      });
    });
    _defineProperty(this, "dragDrop", () => {
      this.insertElementBefore();
    });
  }
  render() {
    let ele = [];
    for (let i = 0; i < this.state.divs.length; i++) {
      ele.push(import_react2.default.createElement(draggableChildren_default, {
        dragStart: () => this.dragStart(i),
        dragEnter: () => this.dragEnter(i),
        dragEnd: this.dragDrop,
        key: i
      }, this.state.divs[i]));
    }
    return import_react2.default.createElement(import_react2.default.Fragment, null, ele);
  }
};
var draggable_default = DraggableComponent;
export {
  draggable_default as Draggable
};
//# sourceMappingURL=react-drag-reorder.js.map
